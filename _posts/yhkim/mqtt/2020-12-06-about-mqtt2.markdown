---
layout: post
title: MQTT의 추가적인 개념
image: /yhkim/mqtt/mqtt.jpg
date: 2020-12-06 20:00:00 +0900
tags:
categories: yhkim
---

#### MQTT는 프로토콜인가?

    ***MQTT is a Client Server publish/subscribe messaging transport protocol.*** 
    It is light weight, open, simple, and designed so as to be easy to implement. 
    These characteristics make it ideal for use in many situations, 
    including constrained environments such as for communication in Machine to Machine (M2M) and Internet of Things (IoT) contexts where a small code footprint is required and/or network bandwidth is at a premium.
    
    ***The protocol runs over TCP/IP, or over other network protocols that provide ordered, lossless, bi-directional connections.***

MQTT 3.1.1 명세에 따르면 MQTT는 PUb/SUB 구조의 메시지 전송 프로토콜이며, TCP/IP 또는 다른 프로토콜을 기반으로 한다. 

#### MQTT의 의미

    ... the primary focus of the protocol has changed from proprietary embedded systems to open Internet of Things (IoT) use cases. 
    This shift in focus has created a lot of confusion about what the acronym MQTT stands for. 
    ***The short answer is that MQTT is no longer considered an acronym. MQTT is simply the name of the protocol.***
    
    The longer answer is that the former acronym stood for MQ Telemetry Transport.
    
    “MQ” refers to the MQ Series, a product IBM developed to support MQ telemetry transport. When Andy and Arlen created their protocol in 1999, they named it after the IBM product. Many sources label MQTT incorrectly as a message queue protocol. That is simply not true. 
    ***MQTT is not a traditional message queuing solution (although it is possible to queue messages in certain cases, a fact that we discuss in detail in an upcoming post).***

we mentioned that MQTT refers to the MQseries product from IBM and ***has nothing to do with “message queue“***

또한, MQTT 공식 사이트에서 가이드로 채택하고 있는 HiveMQ의 문서에 따르면, 
MQTT라는 명칭은 더 이상 두문자어가 아니라 단순히 프로토콜의 이름이다. 
원래 두문자어가 나타냈던 바도 "MQ Telemetry Transport"이다.
MQ란 IBM이 개발했던 MQ Series 라는 상품이며, Message queue가 아니다.
결론적으로, MQTT는 message queue의 기능도 제공하지만 전형적인 메시지 큐 솔루션은 아니다.

MQTT와 메시지 큐의 차이점은 다음과 같다.

- A message queue stores message until they are consumed When you use a message queue

    ***each incoming message is stored in the queue until it is picked up by a client (often called a consumer).*** 
    If no client picks up the message, the message remains stuck in the queue and waits to be consumed. 
    In a message queue, it is not possible for a message not to be processed by any client, as it is in MQTT if nobody subscribes to a topic.
    
MQTT에서는 메시지가 어떤 클라이언트에 의해서도 처리되지 않을 수 있지만, 메시지 큐에서는 큐에 있는 메시지가 처리될 때까지 큐에 남아있다.

- A message is only consumed by one client 

    ***Another big difference is that in a traditional message queue a message can be processed by one consumer only.***
    The load is distributed between all consumers for a queue. In MQTT the behavior is quite the opposite: every subscriber that subscribes to the topic gets the message.
    
MQTT에서는 메시지가 필터링되는 모든 클라이언트(예를 들어, 메시지의 토픽을 구독한 모든 클라이언트)가 메시지를 받지만, 메시지 큐에서는 오로지 한 클라이언트가 메시지를 처리한다.

- Queues are named and must be created explicitly A queue is far more rigid than a topic. 

    Before a queue can be used, the queue must be created explicitly with a separate command. 
    Only after the queue is named and created is it possible to publish or consume messages. 
    In contrast, MQTT topics are extremely flexible and can be created on the fly.
    
MQTT에서 토픽은 매우 유연하고 즉석에서 생성될 수 있지만, 메시지 큐에서의 큐는 명명된 후 분명히 생성되어야 한다.

#### 토픽과 큐의 관련성

PUB/SUB 구조에서 브로커는 특정 클라이언트가 특정 메시지를 받을 수 있도록 메시지를 필터링하는 역할을 한다. 
메시지를 필터링하는 방법에는 세 가지가 있다.

- SUBJECT-BASED FILTERING

    This filtering is based on the subject or topic that is part of each message. 
    ***The receiving client subscribes to the broker for topics of interest.*** 
    From that point on, the broker ensures that the receiving client gets all message published to the subscribed topics. ...
    
현재 MQTT가 채택하고 있는 방식이며, 클라이언트가 특정 토픽을 구독하면 브로커가 해당 토픽의 메시지를 전송하는 방식이다. 이 밖에도 아래와 같은 필터링 방식이 있다.

- CONTENT-BASED FILTERING

    In content-based filtering, ***the broker filters the message based on a specific content filter-language.*** 
    The receiving clients subscribe to filter queries of messages for which they are interested. 
    A significant downside to this method is that the content of the message must be known beforehand and cannot be encrypted or easily changed.

- TYPE-BASED FILTERING

    ***When object-oriented languages are used, filtering based on the type/class of a message (event) is a common practice.*** 
    For example, a subscriber can listen to all messages, which are of type Exception or any sub-type.
    
그리고 MQTT 브로커의 한 종류인 RabbitMQ의 구조는 다음과 같다.
    
![]({{site.baseurl}}/images/yhkim/mqtt/rabbitMQ.png)

결론적으로, MQTT에서의 토픽이란 특정 큐로 메시지를 라우팅시키기 위한 라우팅 키이다.

##### [참고]
* MQTT 3.1.1 명세 : http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
* MQTT Essentials : https://www.hivemq.com/mqtt-essentials/