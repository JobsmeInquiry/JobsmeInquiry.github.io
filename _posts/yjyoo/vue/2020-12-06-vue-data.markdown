---
layout: post
title: Vue 데이터 전달 방법 (props, emit, eventbus, vuex)
image: /yjyoo/vue/vue.jpg
date: 2020-12-06 15:03:00 +0900
tags:
categories: yjyoo
---
컴포넌트의 단방향 통신(One-way Data Flow) : 컴포넌트간에 데이터 전달은 항상 상위에서 하위로만 전달 가능.
상위 속성이 업데이트되면 하위로 흐르게 되지만 그 반대는 안됨. 하위 컴포넌트가 실수로 부모의 상태를 변경하여 앱의 데이터 흐름을 추론하기 더 어렵게 만드는 것을 방지할 수 있음.

***
#### Vue 데이터 전달 방법

* props : 상위 -> 하위 (동기화)
{% highlight js %}
<my-component v-bind:propsdata="message"></my-component> // v-bind:props 속성 이름="상위 컴포넌트의 data 속성“

Vue.component('컴포넌트 이름', {
    props: ['props 속성 이름']
});    
{% endhighlight %}
 
* event emit : 하위 -> 상위. 상위 컴포넌트에서 하위 컴포넌트의 특정 이벤트가 발생(Event Emit)하기를 기다리고 있다가 이벤트 발생 시 상위 컴포는터의 메서드 호출
{% highlight js %}
<my-component v-on:child-method=“parentMethod"></my-component> 
//v-on:하위 컴포넌트 이벤트명="상위 컴포넌트의 메소드명" (이벤트 수신)

this.$emit('이벤트명'); // 이벤트 발생 (하위 컴포넌트 특정 메소드에서 이벤트 발생)
{% endhighlight %}

* event bus : 관계없는 컴포넌트간 통신시 사용. props와 event emit으로 처리하다 보면 강제로 상위 컴포넌트를 두어야 할 수도 있고, 코드가 복잡해짐. 컴포넌트간 데이터 전달이 명시적이지 않아서 컴포넌트가 많아지면 어디서 이벤트가 왔는지, 갔는지 알기 어려움.
{% highlight js %}
// 이벤트 버스를 위한 추가 인스턴스 1개 생성
var eventBus = new Vue();
		
// 이벤트를 보내는 컴포넌트
methods: {			
    메서드명: function() {
        eventBus.$emit('이벤트명', 데이터);
    }
}

// 이벤트를 받는 컴포넌트
methods: {
    created: function() {
        eventBus.$on('이벤트명', function(데이터) { /*로직*/ });
    }
}

{% endhighlight %}

* Vuex : 상태 관리 라이브러리. (하단 참고)

***
#### Vuex

* 상태 관리 라이브러리 : 복잡한 애플리케이션의 컴포넌트들을 효율적으로 관리
* Vuex로 해결할 수 있는 문제
1. MVC 패턴에서 발생하는 구조적 오류
2. 컴포넌트 간 데이터 전달 명시
3. 여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제(mutation, actions)

* Vuex 컨셉 (상태관리 패턴 구성 요소)
1. State : 컴포넌트 간에 공유하는 데이터 - data()
2. View : 데이터를 표시하는 화면 - template
3. Action : 사용자의 입력에 따라 데이터를 변경하는 - methods

* 단방향 데이터 흐름 처리 : View(Template)에서 버튼을 클릭했을때, 클릭이라는 Action(Method)이 발생. 해당 Action이 동작을 통해서 State(data)를 변경<br>
![]({{site.baseurl}}/images/yjyoo/vue/onewayflow.jpg)


* Vuex 전체 흐름도 : 컴포넌트 -> 비동기 로직(Actions) -> 동기 로직(Mutations) -> 상태
![]({{site.baseurl}}/images/yjyoo/vue/vuex.jpg)


* 컴포넌트에서 공유된 상태를 추출하고 이를 전역 싱글톤으로 관리
* Vuex 중심에는 store ”저장소“ 있음 (애플리케이션 상태를 보유하고 있는 컨테이너) 
* 단일 상태 트리 : 각 애플리케이션마다 하나의 저장소만 갖게 된다는 것
* 모든 컴포넌트는 트리에 상관없이 상태에 액세스하거나 동작을 트리거 가능
* Vuex는 Promise를 필요로 함. 만약 브라우저가 아직 Promise를 구현하지 않았다면(ex. IE) es6-promise와 같은 polyfill 라이브러리 사용할 수 있음.

> Vuex가 일반 전역 객체와 다른 점 (2가지)
1. Vuex store는 반응형(Reactive). Vue 컴포넌트는 저장소의 상태가 변경되면 효율적으로 업데이트.
2. 저장소의 상태를 직접 변경할 수 없음. 저장소의 상태를 변경하는 유일한 방법은 명시적인 커밋을 이용한 변이.

* Vuex 주요 속성
1. state : 여러 컴포넌트에 공유되는 데이터 - data
2. getters : 연산된 state 값에 접근하는 속성 - computed
3. mutations : state값을 변경하는 이벤트 로직/메서드 – methods (setters 같은 느낌)
4. actions : 비동기 처리 로직을 선언하는 메소드 – async methods

* mutations
    * getters와 차이점
    1. mutations은 인자를 받아 Vuex에 넘겨줄 수 있음
    2. mutations은 methods에 등록. getters는 computed에 등록
    * actions와 차이점
    1. mutations 는 동기적 로직을 정의. 정의한 로직들이 순차적으로 일어나야 각 컴포넌트의 반영 여부를 제대로 추적할 수가 있기 때문
    2. Actions 는 비동기적 로직을 정의
    * ‘commit’을 이용하여 mutations 이벤트를 호출하여 state 를 변경

> 컴포넌트에서 직접 state 에 접근하여 변경하는 방법 사용 권장하지 않음(Anti-pattern)  
 ex) return this.$store.state.counter++; <br>
 여러 개의 컴포넌트에서 같은 state 값을 동시에 제어하게 되면, state 값이 어느 컴포넌트에서 호출해서 변경된 것인지 추적하기가 어렵기 때문. 따라서, commit을 사용하여 state 변경

* actions : setTimeout()이나 서버와의 http 통신 같이 결과를 받아올 타이밍이 예측되지 않은 로직

* getters & mutations & actions 의 이름을 유일하게 정하지 않으면 namespace 충돌 발생.<br>
 해결 방법 (2가지) <br>
1) 네임스페이스를 구분하기 위해 types.js 로 각 속성의 이름들을 빼고 store.js 와 각 컴포넌트에 import 하여 사용<br>
2) modules 라는 폴더로 만들어 각 단위별로 파일을 쪼개서 관리하는 방법도 있다.

* Helper 함수로 각 속성들을 더 쉽게 사용 가능
1. state -> mapState
2. getters -> mapGetters
3. mutations -> mapMutations
4. actions -> mapActions
![]({{site.baseurl}}/images/yjyoo/vue/helper.jpg)

> 전개 연산자(…) : 객체나 배열의 값을 하나 하나 넘기는 용도. (1차원에서만 유효, 기존 배열을 보존)
{% highlight js %}
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6]; 
const arrWrap = [...arr1, ...arr2]; 
console.log(arrWrap); // [1, 2, 3, 4, 5, 6]
const arr3 = arr1.reverse();
console.log(arr1); // [1, 2, 3]
console.log(arr3); // [3, 2, 1]
{% endhighlight %}


***

예제 - props
{% highlight js %}
<html>
    <head>
        <title>Props</title>
    </head>
    <body>
        <div id="app">
            <my-component v-bind:propsdata1="message" v-bind:propsdata2="cnt"></my-component>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
            var cmp = {
                template: '<div>{{ propsdata1 }} {{ propsdata2 }} {{ cmpdata }}</div>',
                props: ['propsdata1', 'propsdata2'],
                data: function() {
                    return {
                        cmpdata: 'cmpdata'
                    }
                }
            };

            new Vue({
                el: '#app',
                data: {
                    message: 'propstest1',
                    cnt: 100
                },
                components: {
                    'my-component': cmp,
                }
            });
        </script>
    </body>
</html>
{% endhighlight %}

예제 - event emit
{% highlight js %}
<html>
    <head>
        <title>Event Emit</title>
    </head>
    <body>
        <div id="app">
            <my-component v-on:show-log="printText"></my-component>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
            var cmp = {
                template: '<button v-on:click="showLog">Click</button>',
                methods: {
                    showLog: function() {
                        this.$emit('show-log');
                    }
                }
            };

            new Vue({
                el: '#app',
                components: {
                    'my-component': cmp,
                }, 
                methods: {
                    printText: function() {
                        document.getElementById('app').append(' Here!');
                    }
                }
            });
        </script>
    </body>
</html>
{% endhighlight %}

예제 - event bus
{% highlight js %}
<html>
    <head>
        <title>EventBus</title>
    </head>
    <body>
        <div id="app">
            <child-component></child-component>
        </div>
        <div id="app2"></div>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script>
            var eventBus = new Vue();

            var cmp = {
                template: '<button v-on:click="sendData">child Component</button>',
                methods: {
                    sendData: function() {
                        eventBus.$emit('getData', { msg:' eventdata' });
                    }
                }
            }
            
            new Vue({
                el: '#app',
                components: {
                    'child-component': cmp,
                },
                created: function() {
                    eventBus.$on('getData', function(data) {
                        document.getElementById('app').append(data.msg);
                    });
                }
            });

            new Vue({
                el: '#app2',
                created: function() {
                    eventBus.$on('getData', function(data) {
                        document.getElementById('app2').append(data.msg);
                    });
                }
            });
        </script>
    </body>
</html>
{% endhighlight %}

예제 - store.js (vuex)
{% highlight js %}
export const store = new Vuex.Store({
    state: {
      count: 0
    },
    getters: {
        // this.$store.getters.getCounter
        // ...mapGetters({ parentCounter : 'getCounter' }) >> // getCounter는 Vuex 의 getters 에 선언된 속성 이름
        getCounter: function (state) {
            return state.counter;
        }
    },
    mutations: {
        // this.$store.commit('addCounter', 10);
        // ...mapMutations(['addCounter']) >> Vuex 의 Mutations 메서드 명과 App.vue 메서드 명이 동일할 때 [] 사용
        addCounter: function (state, payload) {
            return state.counter++;
        },
        decrement: state => state.count--
    },
    actions: {
        // context는 Vuex 의미
        // this.$store.dispatch('addCounter', 10);
        // ...mapActions(['addCounter', 'getServerData'])
        addCounter: function (context, payload) {
            // commit 의 대상인 addCounter 는 mutations 의 메서드를 의미한다.
            return context.commit('addCounter');
        },
        getServerData: function (context) {
            return axios.get("sample.json").then(function() { /*... */ });
        },
        delayFewMinutes: function (context) {
            return setTimeout(function () { commit('addCounter'); }, 1000);
        }
    }
});
{% endhighlight %}

***
#### [참고]
* Vuex : https://ict-nroo.tistory.com/106
* Vuex : https://vuex.vuejs.org/kr/
* Vuex : https://joshua1988.github.io/web-development/
* Vuex : https://chajinjoo.netlify.app/Vue.js/200504_vuex/
* 전개 연산자 : https://velog.io/@recordboy/%EC%A0%84%EA%B0%9C-%EC%97%B0%EC%82%B0%EC%9E%90Spread-Operator
